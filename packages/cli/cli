#!/usr/bin/env node

const { name, version } = require("./package.json");
const { spawn } = require("child_process");
const path = require("path");
const { program } = require('commander');
const figlet = require("figlet");
const chalk = require("chalk");

const PROCESS_PATH = path.join(process.cwd());
const ROOT_PATH = path.join(__dirname);
const CMD_PATH = path.join(ROOT_PATH, 'cmd');

program
  .command('version')
  .description('Display current version')
  .action(() => {
    console.log(chalk.blue(`${name} : version ${version}`));
  });

program
  .command('wp-bootstrap')
  .description('Install our Docker + Wordpress boilerplate theme in a target directory in a single command')
  .action(() => {
    const run = require(`${CMD_PATH}/bootstrap`).run;
    run();
  });

program
  .command('wp-repository')
  .description('Create Github repository')
  .action(() => {
    const run = require(`${CMD_PATH}/repository`).run;
    run();
  });

program
  .command('wp-theme')
  .description('Install our Wordpress boilerplate theme in a target directory')
  .action(() => {
    const run = require(`${CMD_PATH}/theme`).run;
    run();
  });

program
  .command('wp-docker')
  .description('Install our Wordpress Docker config in a target directory')
  .action(() => {
    const run = require(`${CMD_PATH}/docker`).run;
    run();
  });

program
  .command('dev')
  .description('start Webpack dev server')
  .action(() => {
    const cmd = spawn(`${PROCESS_PATH}/node_modules/.bin/webpack`, ['serve'], {stdio: "inherit"});
  });

program
  .command('build')
  .description('Build static files with Webpack')
  .action(() => {
    const cmd = spawn(`${PROCESS_PATH}/node_modules/.bin/webpack`, ['--config=webpack.config.babel.js', '--mode=production'], {stdio: "inherit"});
  });


// parse program argv
program
  .option('-r, --repository <url>', 'Use another repository URL for checkout')
  .option('-k, --keepgit', 'Keep .git directory?', false)
  .parse(process.argv);


